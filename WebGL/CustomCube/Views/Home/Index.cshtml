@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Custom Cube</title>
    <script src="~/Scripts/jquery-1.8.2.min.js"></script>
    <script src="~/Scripts/lib/webgl-utils.js"></script>
    <script src="~/Scripts/lib/webgl-debug.js"></script>
    <script src="~/Scripts/lib/cuon-utils.js"></script>
    <script src="~/Scripts/lib/cuon-matrix.js"></script>
    <script type="text/javascript">
        // HelloCube.js (c) 2012 matsuda
        // Vertex shader program
        var vs =
          'attribute vec4 a_Position;\n' +
          'attribute vec4 a_Color;\n' +
          'uniform mat4 u_MvpMatrix;\n' +
          'varying vec4 v_Color;\n' +
          'void main() {\n' +
          '  gl_Position = u_MvpMatrix * a_Position;\n' +
          '  v_Color = a_Color;\n' +
          '}\n';

        // Fragment shader program
        var fs =
          '#ifdef GL_ES\n' +
          'precision mediump float;\n' +
          '#endif\n' +
          'varying vec4 v_Color;\n' +
          'void main() {\n' +
          '  gl_FragColor = v_Color;\n' +
          '}\n';

        function initVertexBuffers(gl) {
            //构造一个菱形
            var pos = new Float32Array([
                0.0, 1.5, 0.0,                      //v0
                - 1.0, 0.0, 0.0,                    //v1
                1.0, 0.0, 0.0,                      //v2
                0.0, 0.0, 1.0,                      //v3
                0.0, 0.0, -1.0,                     //v4
                0.0, -1.5, 0.0,                      //v5
            ]);

            var col = new Float32Array([
                1.0, 1.0, 1.0, 0.5,// v0 White
                1.0, 0.0, 1.0, 0.5,  // v1 Magenta
                1.0, 0.0, 0.0, 0.5,  // v2 Red
                1.0, 1.0, 0.0, 0.5,  // v3 Yellow
                0.0, 1.0, 0.0, 0.5,  // v4 Green
                0.0, 1.0, 1.0, 0.5,  // v5 Cyan
            ]);

            var index = new Uint8Array([
                0, 1, 2,
                0, 2, 3,
                0, 3, 4,
                0, 4, 1,
                1, 4, 5,
                2, 1, 5,
                3, 2, 5,
                4, 3, 5
            ]);

            var pbo = new gl.createBuffer();
            var cbo = new gl.createBuffer();
            var ibo = new gl.createBuffer();
            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');

            gl.bindBuffer(gl.ARRAY_BUFFER, pbo);
            gl.bufferData(gl.ARRAY_BUFFER, pos, gl.STATIC_DRAW);
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, pos.BYTES_PER_ELEMENT * 3, 0);
            gl.enableVertexAttribArray(a_Position);

            gl.bindBuffer(gl.ARRAY_BUFFER, cbo);
            gl.bufferData(gl.ARRAY_BUFFER, col, gl.STATIC_DRAW);
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, col.BYTES_PER_ELEMENT * 3, 0);
            gl.enableVertexAttribArray(a_Color);

            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, index, gl.STATIC_DRAW);

            return index.length;
        }

        var ANGLE_STEP = 30.0;

        var g_last = Date.now();
        function animate(angle) {
            // Calculate the elapsed time
            var now = Date.now();
            var elapsed = now - g_last;
            g_last = now;
            // Update the current rotation angle (adjusted by the elapsed time)
            var newAngle = angle + (ANGLE_STEP * elapsed) / 1000.0;
            return newAngle %= 360;
        }

        function draw(gl, n, currentAngle, mvpMatrix, u_MvpMatrix) {
            // Set the rotation matrix
            //mvpMatrix.setRotate(currentAngle, 0, 0, 1);
            //mvpMatrix.translate(0.35, 0, 0);

            // Pass the rotation matrix to the vertex shader
            gl.uniformMatrix4fv(u_MvpMatrix, false, mvpMatrix.elements);

            // Clear <canvas>
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            gl.flush();

            // Draw the rectangle
            //gl.drawArrays(gl.TRIANGLES, 0, n);
            gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);
        }

        $(function () {
            var canvas = document.getElementById('webgl');
            var gl = getWebGLContext(canvas);
            if (!gl) return;

            if (!initShaders(gl, vs, fs)) return;

            var n = initVertexBuffers(gl);
            if (n < 0) return;

            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.enable(gl.DEPTH_TEST);

            var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');
            if (!u_MvpMatrix) return;

            var mvpMatrix = new Matrix4();
            mvpMatrix.setPerspective(30, 1, 1, 100);
            mvpMatrix.lookAt(3, 3, 500, 0, 0, 0, 0, 1, 0);

            //gl.uniformMatrix4fv(u_MvpMatrix, false, mvpMatrix.elements);
            //gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            //gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);

            var currentAngle = 0.0;
            var tick = function () {
                //currentAngle = animate(currentAngle);  // Update the rotation angle
                draw(gl, n, currentAngle, mvpMatrix, u_MvpMatrix);   // Draw the triangle
                requestAnimationFrame(tick, canvas); // Request that the browser ?calls tick
            };
            tick();
        });
    </script>
</head>
<body>
    <canvas id="webgl" width="800" height="600">
        Please user a browers that supports "canvas"
    </canvas>
</body>
</html>
